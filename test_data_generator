#!/usr/bin/env python3
"""
Author: Joshua Chen
Date: 2016-01-12
Location: Shenzhen
Desc: Create a file containing mapping
      of IP and view for view testing.
"""

from acl import *
from view import *
import sys, os

def generate(args):
    """ Check if all views can be ordered, check the acl if required
    """
    paths = args[:2]
    assert len(paths) == 2, "wrong arguments"

    viewPath, aclPath = paths
    ag = AclGroup()
    ag.load(aclPath, remove_conflict=False)
    vg = ViewGroup()
    vg.load(viewPath, resolveParts=False)
    acls   = ag.data
    views  = [x for x in vg.data if x.name != 'ANY']
    res    = {}
    for view in views:
        acl      = acls[view.aclName]
        networks = acl.networks()
        viewName = view.name
        for net in networks:
            firstIp = numToIp(net.firstInt)
            lastIp  = numToIp(net.lastInt)
            maskLen = int(net.name.split('/')[-1])
            addIp(firstIp, maskLen, viewName, res)
            addIp(lastIp,  maskLen, viewName, res)
    seq = 0
    for ip, (mask, viewName) in res.items():
        out(seq, ip, viewName)
        seq += 1

def addIp(ip, mask, viewName, group):
    """ Add the ip and viewName to the group,
    keep the one of a longer mask
    """
    if ip in group:         # added before
        data = group[ip]
        oldMask = data[0]
        mask = max(oldMask, mask)
        data[0] = mask
    else:                   # first time add
        data = [mask, viewName]
    group[ip] = data

def numToIp(number):
    """ Convert the number to an IPv4 address string
    """
    s      = bin(number)[2:]
    p4, s  = s[-8:], s[:-8]
    p3, s  = s[-8:], s[:-8]
    p2, p1 = s[-8:], s[:-8]
    return '%s.%s.%s.%s/32' % (
                int(p1, base=2),
                int(p2, base=2),
                int(p3, base=2),
                int(p4, base=2))

def out(seq, ip, viewName):
    suffix = 'abc.com'
    domain = '%s.%s' % (seq, suffix)
    text   = '%s %s %s' % (domain, ip, viewName)
    print(text)


def help():
    bname = os.path.basename(sys.argv[0])
    text = 'Usage: %s <view-file> <acl-file>' % bname
    print(text)


if __name__ == '__main__':
    args = sys.argv[1:]
    try:
        generate(args)
    except AssertionError as e:
        print(e, file=sys.stderr)
        help()
        exit(1)
    except Exception as e:
        text = str(e).split('] ')[-1]
        if not text:
            text = '-- no error message --'
        print(text, file=sys.stderr)
        help()
        exit(1)
    except KeyboardInterrupt:
        exit(1)
