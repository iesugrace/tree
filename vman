#!/usr/bin/env python3
"""
Author: Joshua Chen
Date: 2016-01-09
Location: Shenzhen
Desc: DNS view manager, process the view database and
      acl database, correct acl conflicts, order view
      entries, produce logically correct (not only
      syntactically) DNS view config and acl config.
"""

from acl import *
from view import *
import sys, os

def checkAcl(args):
    """ Load the acl database, check if its syntax is
    good, and if all Acls can exists with each other.
    """
    verbose = 0
    path    = None
    while args:
        arg = args.pop(0)
        if arg == '-v':
            verbose = 1
        else:
            path = arg

    assert path is not None, "expect a file path"

    g = AclGroup()
    g.verbose = verbose
    def customHandler(*junk, e, new_acl, acls):
        old_acl = e.args[1]
        new_acl_name = new_acl.name
        old_acl_name = old_acl.name
        print("coexist problem: %s:%s <---> %s:%s" %
                (new_acl.lineNumber, new_acl_name,
                 old_acl.lineNumber, old_acl_name),
                file=sys.stderr)
        leftLen = max(len(new_acl_name), 17)
        headFormat = "%%%ss       %%s" % leftLen
        netFormat  = "%%%ss  %%s  %%s" % leftLen
        if g.verbose >= 1:  # show the problematic networks
            less_rela, greater_rela = e.args[0]
            print(headFormat % (new_acl_name, old_acl_name), file=sys.stderr)
            for net1, net2 in less_rela:
                print(netFormat % (net1, '<  ', net2), file=sys.stderr)
            for net1, net2 in greater_rela:
                print(netFormat % (net1, '  >', net2), file=sys.stderr)

    g.coexistExceptionHandler = customHandler
    g.load(path, remove_conflict=True)


def fixAcl(args):
    """ Load the acl database, remove redundant networks,
    solve conflicts, then save the result to a new database.
    """
    verbose = 0
    oldPath = newPath = None
    try:
        oldPath, newPath = args[:2]
    except:
        pass
    assert oldPath != None and newPath != None, "wrong arguments"
    assert os.path.realpath(newPath) != os.path.realpath(oldPath), "two files are the same"
    assert not os.path.exists(newPath), "destination already exists"
    g = AclGroup()
    g.load(oldPath, remove_conflict=True)
    heads = [v for v in g.data.values() if not v.parent]
    g.save(heads, newPath)


def checkView(args):
    """ Check if all views can be ordered, check the acl if required
    """
    checkAcl = True
    paths    = []
    state    = 0
    while args:
        arg = args.pop(0)
        if arg == '--aclok':
            checkAcl = False
        else:
            paths.append(arg)

    assert len(paths) == 2, "wrong arguments"

    def customHandler(*junk, e, viewObj, views):
        print("order problem: %s" % viewObj.name, file=sys.stderr)
        nonlocal state
        state = 1

    viewPath, aclPath = paths
    ag = AclGroup()
    ag.load(aclPath, remove_conflict=checkAcl)
    vg = ViewGroup(acls=ag.data)
    vg.orderExceptionHandler = customHandler
    vg.load(viewPath)
    vg.order()
    exit(state)


def fixView(args):
    """ Fix the order of views, split them if necessary,
    fix acl also if required.
    """
    fixAcl = True
    paths    = []
    while args:
        arg = args.pop(0)
        if arg == '--aclok':
            fixAcl = False
        else:
            paths.append(arg)

    assert len(paths) == 4, "wrong arguments"
    viewPath, aclPath, newViewPath, newAclPath = paths
    assert not os.path.exists(newViewPath), "view destination already exists"
    assert not os.path.exists(newAclPath), "acl destination already exists"

    ag = AclGroup()
    ag.load(aclPath, remove_conflict=fixAcl)
    vg = ViewGroup(acls=ag.data)
    vg.load(viewPath)
    vg.order()

    aclHeads = [v for k, v in vg.acls.items() if v.parent is None]
    AclGroup.save(aclHeads, newAclPath)
    vg.save(newViewPath)


def help():
    bname = os.path.basename(sys.argv[0])
    text = """Usage:
    %s check-acl [-v] <acl-file>
    %s fix-acl <acl-file> <new-acl-file>
    %s check-view [--aclok] <view-file> <acl-file>
    %s fix-view [--aclok] <view-file> <acl-file> <new-view-file> <new-acl-file>
    %s add-net <net> <view> <view-file> <acl-file>"""
    text = text % ((bname,) * 5)
    print(text)


if __name__ == '__main__':
    if len(sys.argv) < 2:
        help()
        exit(1)
    cmd  = sys.argv[1]
    args = sys.argv[2:]
    try:
        if cmd == "check-acl":
            checkAcl(args)
        elif cmd == "fix-acl":
            fixAcl(args)
        elif cmd == "check-view":
            checkView(args)
        elif cmd == "fix-view":
            fixView(args)
        elif cmd == "add-net":
            addNet(args)
        else:
            print("unrecognized command: %s" % cmd, file=sys.stderr)
            help()
            exit(1)
    except AssertionError as e:
        print(e, file=sys.stderr)
        help()
        exit(1)
    except Exception as e:
        print(e, file=sys.stderr)
        help()
        exit(1)
    except KeyboardInterrupt:
        exit(1)
