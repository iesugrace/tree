#!/usr/bin/env python3
"""
Author: Joshua Chen
Date: 2016-01-09
Location: Shenzhen
Desc: DNS view manager, process the view database and
      acl database, correct acl conflicts, order view
      entries, produce logically correct (not only
      syntactically) DNS view config and acl config.
"""

from acl import *
from view import *
import sys, os

def checkAcl(args):
    """ Load the acl database, check if its syntax is
    good, and if all Acls can exists with each other.
    """
    verbose = 0
    path    = None
    while args:
        arg = args.pop(0)
        if arg == '-v':
            verbose = 1
        else:
            path = arg

    assert path is not None, "expect a file path"

    g = AclGroup()
    g.verbose = verbose
    def customHandler(*junk, e, new_acl, acls):
        old_acl = e.args[1]
        new_acl_name = new_acl.name
        old_acl_name = old_acl.name
        print("coexist problem: %s:%s <---> %s:%s" %
                (new_acl.lineNumber, new_acl_name,
                 old_acl.lineNumber, old_acl_name),
                file=sys.stderr)
        leftLen = max(len(new_acl_name), 17)
        headFormat = "%%%ss       %%s" % leftLen
        netFormat  = "%%%ss  %%s  %%s" % leftLen
        if g.verbose >= 1:  # show the problematic networks
            less_rela, greater_rela = e.args[0]
            print(headFormat % (new_acl_name, old_acl_name), file=sys.stderr)
            for net1, net2 in less_rela:
                print(netFormat % (net1, '<  ', net2), file=sys.stderr)
            for net1, net2 in greater_rela:
                print(netFormat % (net1, '  >', net2), file=sys.stderr)

    g.coexistExceptionHandler = customHandler
    g.load(path, remove_conflict=True)


def fixAcl(args):
    """ Load the acl database, remove redundant networks,
    solve conflicts, then save the result to a new database.
    """
    verbose = 0
    oldPath = newPath = None
    try:
        oldPath, newPath = args[:2]
    except:
        pass
    assert oldPath != None and newPath != None, "wrong arguments"
    assert os.path.realpath(newPath) != os.path.realpath(oldPath), "two files are the same"
    assert not os.path.exists(newPath), "destination already exists"
    g = AclGroup()
    g.load(oldPath, remove_conflict=True)
    heads = [v for v in g.data.values() if not v.parent]
    g.save(heads, newPath)


def checkView(args):
    """ Check if all views can be ordered, check the acl if required
    """
    checkAcl = True
    paths    = []
    state    = 0
    while args:
        arg = args.pop(0)
        if arg == '--aclok':
            checkAcl = False
        else:
            paths.append(arg)

    assert len(paths) == 2, "wrong arguments"

    def customHandler(*junk, e, viewObj, views):
        print("order problem: %s" % viewObj.name, file=sys.stderr)
        nonlocal state
        state = 1

    viewPath, aclPath = paths
    ag = AclGroup()
    ag.load(aclPath, remove_conflict=checkAcl)
    vg = ViewGroup(acls=ag.data)
    vg.orderExceptionHandler = customHandler
    vg.load(viewPath)
    vg.order()
    exit(state)


def fixView(args):
    """ Fix the order of views, split them if necessary,
    fix acl also if required.
    """
    fixAcl = True
    paths    = []
    while args:
        arg = args.pop(0)
        if arg == '--aclok':
            fixAcl = False
        else:
            paths.append(arg)

    assert len(paths) == 4, "wrong arguments"
    viewPath, aclPath, newViewPath, newAclPath = paths
    assert not os.path.exists(newViewPath), "view destination already exists"
    assert not os.path.exists(newAclPath), "acl destination already exists"

    ag = AclGroup()
    ag.load(aclPath, remove_conflict=fixAcl)
    vg = ViewGroup(acls=ag.data)
    vg.load(viewPath)
    vg.order()

    aclHeads = [v for k, v in vg.acls.items() if v.parent is None]
    AclGroup.save(aclHeads, newAclPath)
    vg.save(newViewPath)


def addNet(args):
    """ Add multiple networks to a view, Solve any acl
    conflict and view order problem that caused by the
    introduction of the new networks.
    """
    try:
        viewPath, aclPath, *viewArgs = args
        argData = parseArgs(viewArgs)
    except:
        raise Exception("wrong arguments")
    assert len(argData) != 0, "wrong arguments"

    # load view database, no acls DB at this point,
    # and parts are not resolved at this point.
    vg = ViewGroup()
    vg.load(viewPath, resolveParts=False)

    # load acl database
    ag = AclGroup()
    ag.load(aclPath, remove_conflict=False)

    # add networks to views
    addedCount = 0
    for viewName, netNames in argData.items():
        addedCount += processOneView(viewName, netNames, vg.data, ag)

    if not addedCount:
        print("no network added, nothing changed")
        exit(0)

    # solve acl conflicts
    ag.removeConflicts()

    # order the view data according to the new acl database
    vg.attachAclDb(ag.data)
    vg.resolveViewsParts()
    vg.order()

    # write out
    aclHeads = [v for k, v in vg.acls.items() if v.parent is None]
    AclGroup.save(aclHeads, aclPath)
    vg.save(viewPath)


def processOneView(viewName, netNames, views, aclGroup):
    # resolve the view name
    viewName = resolveViewName(viewName, views)

    # add networks to the acl group
    aclName    = [x.aclName for x in views if x.name == viewName][0]
    acl        = aclGroup.data[aclName]
    addedCount = 0
    for netName in netNames:
        net = Network(netName, code=netName)
        if aclGroup.addNetwork(net):
            acl.attachChild(net)
            addedCount += 1
    acl.removeRedundant()
    return addedCount


def resolveViewName(name, group):
    """ The provided view from the command line
    may had been split into parts before, here
    we find and return one part that used to be
    part of the original view, from the given
    view group which is a list.
    """
    # the exact name exists, return it
    if [x for x in group if x.name == name]:
        return name

    # not exists, found one of its parts
    flag     = name + '-'
    names    = [x.name for x in group if x.name.startswith(flag)]
    if names:
        return names[0]
    else:
        raise Exception("view not exists: %s" % name)


def parseArgs(iData):
    """ Parse the input argument data iData
    which is a list of strings, return a
    dictionary.
    """
    res = {}
    for viewArg in iData:
        viewName, networkList = viewArg.split(':')
        netNames = networkList.split(',')
        if not viewName or not netNames:
            raise Exception
        res[viewName] = netNames
    return res


def usage():
    bname = os.path.basename(sys.argv[0])
    text = """Usage:
%s --help
%s add-net <view-file> <acl-file> <view:net[,net]...> [view:net[,net]...]...
%s check-acl [-v] <acl-file>
%s fix-acl <acl-file> <new-acl-file>
%s check-view [--aclok] <view-file> <acl-file>
%s fix-view [--aclok] <view-file> <acl-file> <new-view-file> <new-acl-file>"""
    text = text % ((bname,) * 6)
    print(text)


def help():
    """ Detailed help message
    """
    msg = """------- vman 命令使用方法举例 -------


1. 添加网段到View 中

   添加一个网段到一个View，view 和网段之间用冒号分隔
    $ vman add-net view.conf acl.conf GD_CTC:1.1.1.0/24

   添加多个网段到一个View，网段之间用逗号分隔
    $ vman add-net view.conf acl.conf GD_CTC:1.1.1.0/24,2.2.2.0/24

   添加多个网段到多个View，view 和view 之间用空格分隔
    $ vman add-net view.conf acl.conf GD_CTC:1.1.1.0/24,2.2.2.0/24 CQ_CTC:3.3.3.0/24


2. 检查Acl 文件是否有误
    $ vman check-acl acl.conf

    加上-v 参数可以看到更详细的信息
    $ vman check-acl -v acl.conf


3. 修复Acl 文件，生成新的正确的Acl 文件
    $ vman fix-acl acl.conf new-acl.conf


4. 检查View 文件是否有误
   这个操作需要用到Acl 文件，所以需要一并提供Acl 文件的路径，
   --aclok 参数表示Acl 文件已经修复过了，不需要再修复。

   先修复Acl，再检查View，但是不会保存修复过的Acl。
    $ vman check-view view.conf acl.conf

   不修复Acl，直接检查View
    $ vman check-view --aclok view.conf acl.conf


5. 修复View 文件。 修复View 的过程中，根据需要，
   有可能会修改Acl，所以本操作会生成新的View 和Acl 文件。

   一步到位同时修复View 和Acl
    $ vman fix-view view.conf acl.conf new-view.conf new-acl.conf

   在修复好Acl 的基础之上修复View
    $ vman fix-view --aclok view.conf acl.conf new-view.conf new-acl.conf"""
    usage()
    print('\n\n', msg, sep='')


if __name__ == '__main__':
    if len(sys.argv) < 2:
        usage()
        exit(1)
    cmd  = sys.argv[1]
    args = sys.argv[2:]
    try:
        if cmd == "check-acl":
            checkAcl(args)
        elif cmd == "fix-acl":
            fixAcl(args)
        elif cmd == "check-view":
            checkView(args)
        elif cmd == "fix-view":
            fixView(args)
        elif cmd == "add-net":
            addNet(args)
        elif cmd == "--help":
            help()
            exit(0)
        else:
            print("unrecognized command: %s" % cmd, file=sys.stderr)
            usage()
            exit(1)
    except AssertionError as e:
        print(e, file=sys.stderr)
        usage()
        exit(1)
    except Exception as e:
        text = str(e).split('] ')[-1]
        if not text:
            text = '-- no error message --'
        print(text, file=sys.stderr)
        usage()
        exit(1)
    except KeyboardInterrupt:
        exit(1)
